Exercise 4.3
This exercise reviews the flow of execution through a program with
multiple methods. Read the following code and answer the questions below.

public class Buzz {
    public static void baffle (String blimp) {
        System.out.println (blimp);\\ 2
        zippo ("ping", -5);
    }

    public static void zippo (String quince, int flag) {
        if (flag < 0) {
            System.out.println (quince + " zoop");\\ 3
        } else {
            System.out.println ("ik");\\ 1
            baffle (quince);
            System.out.println ("boo-wa-ha-ha");\\ 4
        }
    }

    public static void main (String[] args) {
         zippo ("rattle", 13);
    }

}

a. Write the number 1 next to the first statement of this program that will be
executed. Be careful to distinguish things that are statements from things that
are not.

b. Write the number 2 next to the second statement, and so on until the end of
the program. If a statement is executed more than once, it might end up with
more than one number next to it.

c. What is the value of the parameter blimp when baffle gets invoked? ("rattle")

d. What is the output of this program? (ik, rattle, ping zoop, boo-wa-ha-ha)

--------------------------------------------------------------------------------------------------
Exercise 4.4
The first verse of the song “99 Bottles of Beer” is:
99 bottles of beer on the wall, 99 bottles of beer, ya’ take one down, ya’
pass it around, 98 bottles of beer on the wall.

Subsequent verses are identical except that the number of bottles gets smaller by one
in each verse, until the last verse:
No bottles of beer on the wall, no bottles of beer, ya’ can’t take one down,
ya’ can’t pass it around, ’cause there are no more bottles of beer on the
wall!
And then the song (finally) ends.

Write a program that prints the entire lyrics of “99 Bottles of Beer.” Your program
should include a recursive method that does the hard part, but you also might want
to write additional methods to separate the major functions of the program.
As you are developing your code, you will probably want to test it with a small number
of verses, like “3 Bottles of Beer.”
The purpose of this exercise is to take a problem and break it into smaller problems,
and to solve the smaller problems by writing simple, easily-debugged methods.
-----------------------------------------------------------------------------------------------

Exercise 4.5 What is the output of the following program?
public class Narf {
    public static void zoop (String fred, int bob) {
        System.out.println (fred);
        if (bob == 5) {
            ping ("not ");
        } else {
            System.out.println ("!");
        }
    }
    public static void main (String[] args) {
        int bizz = 5;
        int buzz = 2;
        zoop ("just for", bizz);
        clink (2*buzz);
    }
    public static void clink (int fork) {
        System.out.print ("It’s ");
        zoop ("breakfast ", fork) ;
    }
    public static void ping (String strangStrung) {
        System.out.println ("any " + strangStrung + "more ");
    }
}
- "just for"
- "any not more "
- "It’s breakfast "
- "!"
----------------------------------------------------------------------------------------------
Exercise 4.6 Fermat’s Last Theorem says that there are no integers a, b, and c
such that
an + bn = cn
except in the case when n = 2.
Write a method named checkFermat that takes four integers as parameters—a, b, c
and n—and that checks to see if Fermat’s theorem holds. If n is greater than 2 and
it turns out to be true that an + bn = cn, the program should print “Holy smokes,
Fermat was wrong!” Otherwise the program should print “No, that doesn’t work.”
You should assume that there is a method named raiseToPow that takes two integers
as arguments and that raises the first argument to the power of the second. For
example:
int x = raiseToPow (2, 3);
would assign the value 8 to x, because 2^3 = 8.

